// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  u_id            String           @id @default(uuid())
  sort_id         Int              @unique @default(autoincrement())
  email           String           @unique
  password        String
  name            String
  role            Role             @default(STUDENT)
  authProvider    AuthProvider     @default(EMAIL)
  enrolledCourses CourseProgress[]
  interviews      Interview[]
  courseId        String[]
}

model BlacklistedToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Course {
  c_id       String           @id @default(uuid())
  c_name     String
  logo       String
  c_desc     String
  c_price    Float
  c_rating   Float
  category   CourseCategory   @default(NONE)
  stageCount Int
  rounds     Round[]
  progresses CourseProgress[]
  Resume     Resume[]
  Hackathon  Hackathon[]
  Interview  Interview[]
  // OnlineAssessment OnlineAssessment[]
}

model Round {
  id              String @id @default(uuid())
  course          Course @relation(fields: [c_id], references: [c_id], onDelete: Cascade)
  c_id            String
  round_name      String // e.g., "Resume", "OA", "Hackathon", "Interview"
  estimated_score Int
}

model Resume {
  r_id                          String   @id @default(uuid())
  course                        Course   @relation(fields: [c_id], references: [c_id], onDelete: Cascade)
  c_id                          String   @unique
  r_previous_resume_shortlisted String[] // Keeping as an array for now
  r_key_words                   String[]
}

model Hackathon {
  h_id        String   @id @default(uuid())
  course      Course   @relation(fields: [c_id], references: [c_id], onDelete: Cascade)
  c_id        String
  h_platform  String
  h_questions String[]
}

model Interview {
  i_id                   String  @id @default(uuid())
  course                 Course  @relation(fields: [c_id], references: [c_id], onDelete: Cascade)
  c_id                   String
  total_interview_rounds Int
  description            String // Common topics for interviewer and candidate
  interviewer            User?   @relation(fields: [interviewer_id], references: [u_id])
  interviewer_id         String?
}

model CourseProgress {
  p_id                String  @id @default(uuid())
  user                User    @relation(fields: [u_id], references: [u_id], onDelete: Cascade)
  course              Course  @relation(fields: [c_id], references: [c_id], onDelete: Cascade)
  u_id                String
  c_id                String
  current_round       String // Name of the current round (can be an ENUM)
  progress_percentage Float
  scores              Int[] // Array of scores in different rounds
  hoursSpent Int @default(0)
  mentor_assigned     String? // Nullable, store mentor ID if assigned
  //interviewer         User?    @relation(fields: [interviewer_id], references: [u_id])
  interviewer_id      String?
  @@unique([u_id, c_id])
}

enum CourseCategory {
  MAANG
  TRENDING
  LATEST
  STAFF_PICK
  NONE
}

enum AuthProvider {
  EMAIL // Email & password authentication
  GOOGLE // Google OAuth
  GITHUB // GitHub OAuth (if added)
}

enum Role {
  STUDENT
  MENTOR
  ADMIN
}
